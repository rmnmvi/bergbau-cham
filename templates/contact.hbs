<!DOCTYPE html>
<html lang="{{#if isFrench}}fr{{else}}en{{/if}}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{contact.meta_title}}</title>
    <meta name="description" content="{{contact.meta_description}}">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://bergbautechnik-cham.de/{{#if isFrench}}fr/{{/if}}contact.html">
    <meta property="og:title" content="{{contact.meta_title}}">
    <meta property="og:description" content="{{contact.meta_description}}">
    <meta property="og:image" content="https://bergbautechnik-cham.de/assets/images/og/og-image.jpg">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:site_name" content="Bergbau Cham">
    <meta property="og:locale" content="{{#if isFrench}}fr_FR{{else}}en_US{{/if}}">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://bergbautechnik-cham.de/{{#if isFrench}}fr/{{/if}}contact.html">
    <meta property="twitter:title" content="{{contact.meta_title}}">
    <meta property="twitter:description" content="{{contact.meta_description}}">
    <meta property="twitter:image" content="https://bergbautechnik-cham.de/assets/images/og/og-image.jpg">

    <!-- Favicons -->
    <link rel="icon" type="image/png" href="/assets/favicon/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/assets/favicon/favicon.svg" />
    <link rel="shortcut icon" href="/assets/favicon/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicon/apple-touch-icon.png" />
    <link rel="manifest" href="/assets/favicon/site.webmanifest" />
    <meta name="theme-color" content="#F97316">

    <!-- Styles -->
    <link href="/styles.css" rel="stylesheet">
    <!-- FingerprintJS for device identification -->
    <script src="https://cdn.jsdelivr.net/npm/@fingerprintjs/fingerprintjs@3/dist/fp.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');
        .font-sans-body { font-family: 'Open Sans', sans-serif; }
        .btn-primary {
            background-color: #F97316;
            color: white;
            padding: 16px 32px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.2s;
            display: inline-block;
            text-align: center;
            width: 100%;
        }
        .btn-primary:hover {
            background-color: #EA580C;
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(249, 115, 22, 0.3);
        }
        .btn-primary:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        /* reCAPTCHA-style Captcha */
        .recaptcha-container {
            display: inline-block;
            background: #f9f9f9;
            border: 1px solid #d3d3d3;
            border-radius: 3px;
            padding: 8px;
            box-shadow: 0 0 4px 1px rgba(0,0,0,0.08);
            width: 280px;
            height: 70px;
            margin: 16px 0;
            cursor: pointer;
        }

        .recaptcha-inner {
            display: flex;
            align-items: center;
            gap: 12px;
            height: 100%;
            position: relative;
            user-select: none;
        }

        .recaptcha-checkbox-wrapper {
            width: 24px;
            height: 24px;
            position: relative;
            flex-shrink: 0;
        }

        .recaptcha-checkbox {
            width: 24px;
            height: 24px;
            border: 2px solid #c1c1c1;
            border-radius: 2px;
            background: white;
            transition: all 0.3s ease;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .recaptcha-checkbox:hover {
            border-color: #b2b2b2;
        }

        .recaptcha-checkbox.checking .recaptcha-spinner {
            display: block;
        }

        .recaptcha-spinner {
            display: none;
            width: 16px;
            height: 16px;
            border: 2px solid #F97316;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .recaptcha-checkbox.verified {
            background: white;
            border-color: #009624;
        }

        .recaptcha-checkmark {
            display: none;
        }

        .recaptcha-checkbox.verified .recaptcha-checkmark {
            display: block;
            stroke: #009624;
            stroke-width: 2;
            fill: none;
            stroke-dasharray: 30;
            stroke-dashoffset: 0;
            animation: checkmark 0.4s ease-in-out;
        }

        @keyframes checkmark {
            0% {
                stroke-dashoffset: 30;
                opacity: 0;
            }
            50% {
                opacity: 1;
            }
            100% {
                stroke-dashoffset: 0;
                opacity: 1;
            }
        }

        .recaptcha-label {
            font-family: 'Roboto', 'Helvetica', Arial, sans-serif;
            font-size: 14px;
            font-weight: 400;
            color: #222;
            user-select: none;
            flex-grow: 1;
        }

        .recaptcha-logo {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2px;
            margin-left: auto;
        }

        #captcha-icon {
            width: 32px;
            height: 32px;
        }

        .recaptcha-logo-text {
            font-family: 'Roboto', 'Helvetica', Arial, sans-serif;
            font-size: 10px;
            color: #555;
            font-weight: 400;
        }

        /* Honeypot field - hidden from users */
        .website-field {
            position: absolute;
            left: -9999px;
            top: -9999px;
            height: 0;
            width: 0;
            opacity: 0;
            pointer-events: none;
        }
    </style>
</head>
<body class="font-sans-body">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-20">
                <!-- Logo/Company Name -->
                <div class="flex items-center">
                    <a href="{{#if isFrench}}/fr{{else}}/{{/if}}" class="flex items-center">
                        <img src="/assets/images/logo/logo_black.svg" alt="Bergbau Cham Logo" class="h-10 w-auto">
                    </a>
                </div>

                <!-- Desktop Navigation -->
                <div class="hidden md:flex items-center space-x-8">
                    <a href="{{#if isFrench}}/fr/contact.html{{else}}/contact.html{{/if}}" class="text-orange font-semibold">{{nav.contact}}</a>
                    <a href="{{#if isFrench}}/fr/quote.html{{else}}/quote.html{{/if}}" class="bg-orange text-white px-4 py-2 rounded-md font-semibold hover:bg-orange-dark transition">{{nav.quote}}</a>

                    <!-- Language Switcher -->
                    <div class="flex items-center border-l pl-6 ml-6">
                        {{#if isFrench}}
                        <a href="/contact.html" class="text-gray-700 hover:text-orange transition flex items-center">
                            <span class="mr-1">ðŸ‡¬ðŸ‡§</span> EN
                        </a>
                        {{else}}
                        <a href="/fr/contact.html" class="text-gray-700 hover:text-orange transition flex items-center">
                            <span class="mr-1">ðŸ‡«ðŸ‡·</span> FR
                        </a>
                        {{/if}}
                    </div>
                </div>

                <!-- Mobile Menu Button -->
                <div class="md:hidden">
                    <button onclick="toggleMobileMenu()" class="text-gray-700">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Mobile Menu -->
            <div id="mobileMenu" class="hidden md:hidden">
                <div class="px-2 pt-2 pb-3 space-y-1">
                    <a href="{{#if isFrench}}/fr/contact.html{{else}}/contact.html{{/if}}" class="block px-3 py-2 text-orange font-semibold">{{nav.contact}}</a>
                    <a href="{{#if isFrench}}/fr/quote.html{{else}}/quote.html{{/if}}" class="block px-3 py-2 bg-orange text-white rounded-md font-semibold">{{nav.quote}}</a>
                    <div class="border-t mt-3 pt-3">
                        {{#if isFrench}}
                        <a href="/contact.html" class="block px-3 py-2 text-gray-700 hover:text-orange">
                            <span class="mr-1">ðŸ‡¬ðŸ‡§</span> English
                        </a>
                        {{else}}
                        <a href="/fr/contact.html" class="block px-3 py-2 text-gray-700 hover:text-orange">
                            <span class="mr-1">ðŸ‡«ðŸ‡·</span> FranÃ§ais
                        </a>
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Contact Section -->
    <section class="py-20 bg-white" id="contactSection">
        <div class="container mx-auto px-6">
            <h1 class="font-sans-body text-4xl md:text-5xl font-bold text-center mb-4">
                {{contact.title}}
            </h1>
            <p class="text-xl text-gray-600 text-center mb-12 max-w-3xl mx-auto">
                {{contact.description}}
            </p>
            <div class="max-w-2xl mx-auto">
                <form id="contactForm" class="space-y-6" action="/api/submit-contact" method="POST">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700 mb-2">{{contact.form.name}} *</label>
                        <input type="text" name="name" id="name" required
                               placeholder="{{contact.form.name_placeholder}}"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange focus:border-transparent">
                    </div>
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">{{contact.form.email}} *</label>
                        <input type="email" name="email" id="email" required
                               placeholder="{{contact.form.email_placeholder}}"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange focus:border-transparent">
                    </div>
                    <div>
                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">{{contact.form.phone}} *</label>
                        <input type="tel" name="phone" id="phone" required
                               placeholder="{{contact.form.phone_placeholder}}"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange focus:border-transparent">
                    </div>
                    <div>
                        <label for="country" class="block text-sm font-medium text-gray-700 mb-2">{{contact.form.country}} *</label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10 pointer-events-none">
                                <svg id="locationIcon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="1.5">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m20.893 13.393-1.135-1.135a2.252 2.252 0 0 1-.421-.585l-1.08-2.16a.414.414 0 0 0-.663-.107.827.827 0 0 1-.812.21l-1.273-.363a.89.89 0 0 0-.738 1.595l.587.39c.59.395.674 1.23.172 1.732l-.2.2c-.212.212-.33.498-.33.796v.41c0 .409-.11.809-.32 1.158l-1.315 2.191a2.11 2.11 0 0 1-1.81 1.025 1.055 1.055 0 0 1-1.055-1.055v-1.172c0-.92-.56-1.747-1.414-2.089l-.655-.261a2.25 2.25 0 0 1-1.383-2.46l.007-.042a2.25 2.25 0 0 1 .29-.787l.09-.15a2.25 2.25 0 0 1 2.37-1.048l1.178.236a1.125 1.125 0 0 0 1.302-.795l.208-.73a1.125 1.125 0 0 0-.578-1.315l-.665-.332-.091.091a2.25 2.25 0 0 1-1.591.659h-.18c-.249 0-.487.1-.662.274a.931.931 0 0 1-1.458-1.137l1.411-2.353a2.25 2.25 0 0 0 .286-.76m11.928 9.869A9 9 0 0 0 8.965 3.525m11.928 9.868A9 9 0 1 1 8.965 3.525" />
                                </svg>
                                <svg id="loadingSpinner" class="w-5 h-5 animate-spin hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            </span>
                            <input type="text" name="country" id="country" required readonly
                                   placeholder="{{contact.form.country_placeholder}}"
                                   style="padding-left: 3.5rem;"
                                   class="w-full pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange focus:border-transparent bg-gray-50 placeholder-gray-400 cursor-pointer hover:bg-gray-100 transition-colors">
                            <span id="locationStatus" class="absolute right-3 top-1/2 transform -translate-y-1/2 hidden">
                                <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                                </svg>
                            </span>
                        </div>
                        <p id="locationInfo" class="mt-1 text-xs text-gray-500 hidden"></p>
                        <!-- Hidden fields for geocoordinates -->
                        <input type="hidden" name="geo_lat" id="geo_lat">
                        <input type="hidden" name="geo_lng" id="geo_lng">
                        <input type="hidden" name="geo_accuracy" id="geo_accuracy">
                        <input type="hidden" name="geo_timestamp" id="geo_timestamp">
                        <input type="hidden" name="geo_city" id="geo_city">
                        <input type="hidden" name="geo_region" id="geo_region">
                    </div>
                    <div>
                        <label for="message" class="block text-sm font-medium text-gray-700 mb-2">{{contact.form.message}} *</label>
                        <textarea name="message" id="message" rows="5" required
                                  placeholder="{{contact.form.message_placeholder}}"
                                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange focus:border-transparent"></textarea>
                    </div>
                    <div>
                        <label for="attachment" class="block text-sm font-medium text-gray-700 mb-2">{{contact.form.attachment}}</label>
                        <input type="file" name="attachment" id="attachment"
                               accept="image/*,application/pdf"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange focus:border-transparent">
                        <p class="mt-1 text-sm text-gray-500">{{contact.form.attachment_info}}</p>
                    </div>

                    <!-- Honeypot field -->
                    <div class="website-field">
                        <label for="website">Website</label>
                        <input type="text" name="website" id="website" tabindex="-1" autocomplete="off">
                    </div>

                    <!-- reCAPTCHA-style Geolocation Captcha -->
                    <div class="recaptcha-container" id="recaptchaContainer">
                        <div class="recaptcha-inner" id="recaptchaBox">
                            <div class="recaptcha-checkbox-wrapper">
                                <div class="recaptcha-checkbox" id="recaptchaCheckbox">
                                    <div class="recaptcha-spinner"></div>
                                    <svg class="recaptcha-checkmark" width="12" height="9" viewBox="0 0 12 9">
                                        <path d="M1 4.5L4.5 8L11 1" />
                                    </svg>
                                </div>
                            </div>
                            <span class="recaptcha-label">{{contact.form.captcha}}</span>
                            <div class="recaptcha-logo">
                                <svg id="captcha-icon" width="32" height="32" viewBox="0 0 36 36">
                                    <defs>
                                        <linearGradient id="blue-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                            <stop offset="0%" style="stop-color:#F97316"></stop>
                                            <stop offset="100%" style="stop-color:#EA580C"></stop>
                                        </linearGradient>
                                    </defs>
                                    <g id="icon-default">
                                        <path d="M18 0C18 0 18 18 18 18C27.941 18 36 9.941 36 0L18 0Z" fill="url(#blue-gradient)"></path>
                                        <path d="M18 36C18 36 18 18 18 18C8.059 18 0 26.059 0 36L18 36Z" fill="#34a853"></path>
                                        <path d="M0 0C0 9.941 8.059 18 18 18V0H0Z" fill="#fbbc04"></path>
                                        <path d="M36 36C36 26.059 27.941 18 18 18V36H36Z" fill="#ea4335"></path>
                                        <path d="M18 12C14.686 12 12 14.686 12 18C12 21.314 14.686 24 18 24C21.314 24 24 21.314 24 18C24 14.686 21.314 12 18 12Z" fill="white"></path>
                                    </g>
                                    <g id="icon-success" style="display: none;">
                                        <circle cx="18" cy="18" r="18" fill="#34a853"></circle>
                                        <path d="M 8 18 L 14 24 L 28 10" fill="none" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path>
                                    </g>
                                    <g id="icon-failure" style="display: none;">
                                        <circle cx="18" cy="18" r="18" fill="#ea4335"></circle>
                                        <path d="M 11 11 L 25 25 M 25 11 L 11 25" stroke="white" stroke-width="3" stroke-linecap="round"></path>
                                    </g>
                                </svg>
                                <span class="recaptcha-logo-text">reCAPTCHA</span>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="w-full btn-primary" id="submitButton" disabled>
                        {{contact.form.submit}}
                    </button>
                </form>

                <!-- GDPR Notice -->
                <div class="mt-6 bg-gray-50 p-4 rounded-lg">
                    <p class="text-sm text-gray-600">
                        {{{contact.form.gdpr_notice}}}
                    </p>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="bg-black">
        <div class="mx-auto max-w-7xl overflow-hidden px-6 py-20 sm:py-24 lg:px-8">
            <!-- Navigation Links -->
            <nav aria-label="Footer" class="-mb-6 flex flex-wrap justify-center gap-x-12 gap-y-3 text-sm">
                <a href="{{#if isFrench}}/fr/contact.html{{else}}/contact.html{{/if}}" class="text-gray-400 hover:text-orange transition">{{nav.contact}}</a>
                <a href="{{#if isFrench}}/fr/imprint.html{{else}}/imprint.html{{/if}}" class="text-gray-400 hover:text-orange transition">{{nav.imprint}}</a>
                <a href="{{#if isFrench}}/fr/privacy.html{{else}}/privacy.html{{/if}}" class="text-gray-400 hover:text-orange transition">{{nav.privacy}}</a>
            </nav>

            <!-- Contact Icons -->
            <div class="mt-16 flex justify-center gap-x-10">
                <!-- Email -->
                <a href="mailto:{{footer.email}}" class="text-gray-400 hover:text-orange transition">
                    <span class="sr-only">Email</span>
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                    </svg>
                </a>

                <!-- Phone -->
                <a href="tel:{{footer.phone}}" class="text-gray-400 hover:text-orange transition">
                    <span class="sr-only">{{nav.phone}}</span>
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                    </svg>
                </a>
            </div>

            <!-- Copyright & Address -->
            <div class="mt-10 text-center text-sm text-gray-400">
                <p class="mb-2">{{footer.copyright}}</p>
                <p>{{footer.address}}</p>
                <p class="mt-2">
                    <a href="tel:{{footer.phone}}" class="hover:text-orange transition">{{footer.phone}}</a> Â·
                    <a href="mailto:{{footer.email}}" class="hover:text-orange transition">{{footer.email}}</a>
                </p>
            </div>
        </div>
    </footer>

    <script>
        // Mobile menu toggle
        function toggleMobileMenu() {
            const menu = document.getElementById('mobileMenu');
            menu.classList.toggle('hidden');
        }

        // Initialize FingerprintJS
        let visitorId = null;
        let formLoadTime = new Date().toISOString();
        const fpPromise = FingerprintJS.load();
        fpPromise.then(fp => fp.get()).then(result => {
            visitorId = result.visitorId;
        });

        // Geolocation-based Captcha verification
        let captchaVerified = false;
        let geolocationData = null;
        let behavioralData = {
            formLoadTime: formLoadTime,
            timeToSubmit: 0,
            honeypotTriggered: false,
            fingerprintId: null
        };

        // Google Sheets webhook URL (would need to be configured)
        const GOOGLE_SHEETS_WEBHOOK = 'https://script.google.com/macros/s/YOUR_WEBHOOK_ID/exec';

        // Enhanced geolocation capture with immediate logging
        async function captureAndLogGeolocation() {
            return new Promise((resolve, reject) => {
                if (!navigator.geolocation) {
                    reject(new Error('Geolocation not supported'));
                    return;
                }

                navigator.geolocation.getCurrentPosition(
                    async (position) => {
                        const geoData = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude,
                            accuracy: position.coords.accuracy,
                            altitude: position.coords.altitude,
                            altitudeAccuracy: position.coords.altitudeAccuracy,
                            heading: position.coords.heading,
                            speed: position.coords.speed,
                            timestamp: new Date().toISOString()
                        };

                        // Store in hidden fields
                        document.getElementById('geo_lat').value = geoData.lat;
                        document.getElementById('geo_lng').value = geoData.lng;
                        document.getElementById('geo_accuracy').value = geoData.accuracy;
                        document.getElementById('geo_timestamp').value = geoData.timestamp;

                        // Reverse geocode to get country and city
                        try {
                            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${geoData.lat}&lon=${geoData.lng}&format=json&accept-language={{#if isFrench}}fr{{else}}en{{/if}}`);
                            const locationData = await response.json();

                            geoData.country = locationData.address.country || '';
                            geoData.city = locationData.address.city || locationData.address.town || locationData.address.village || '';
                            geoData.region = locationData.address.state || locationData.address.region || '';

                            // Store additional location data
                            document.getElementById('geo_city').value = geoData.city;
                            document.getElementById('geo_region').value = geoData.region;

                            resolve(geoData);
                        } catch (error) {
                            // Fallback if reverse geocoding fails
                            console.log('Reverse geocoding failed:', error);
                            geoData.country = 'Location detected';
                            resolve(geoData);
                        }
                    },
                    (error) => {
                        reject(error);
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 10000,
                        maximumAge: 0
                    }
                );
            });
        }

        // Handle location input click
        document.addEventListener('DOMContentLoaded', function() {
            const countryInput = document.getElementById('country');
            const locationIcon = document.getElementById('locationIcon');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const locationStatus = document.getElementById('locationStatus');
            const locationInfo = document.getElementById('locationInfo');

            if (countryInput) {
                countryInput.addEventListener('click', async function() {
                    // Prevent triggering if already detected or processing
                    if (countryInput.value && countryInput.value !== '{{contact.form.country_placeholder}}') {
                        return;
                    }
                    // Show loading state
                    locationIcon.classList.add('hidden');
                    loadingSpinner.classList.remove('hidden');
                    countryInput.value = '{{contact.form.detecting}}';

                    try {
                        // Clear any previous error messages
                        locationInfo.classList.add('hidden');
                        locationInfo.classList.remove('text-red-600');

                        // Capture and log geolocation
                        const geoData = await captureAndLogGeolocation();

                        // Update UI with country
                        countryInput.value = geoData.country;
                        countryInput.classList.remove('bg-gray-50');
                        countryInput.classList.add('bg-green-50', 'border-green-500');

                        // Show success status
                        locationStatus.classList.remove('hidden');

                        // Auto-verify captcha
                        const checkbox = document.getElementById('recaptchaCheckbox');
                        const submitButton = document.getElementById('submitButton');
                        if (checkbox && !captchaVerified) {
                            checkbox.classList.add('verified');
                            captchaVerified = true;
                            geolocationData = geoData;
                            submitButton.disabled = false;

                            // Store verification
                            sessionStorage.setItem('captchaVerified', JSON.stringify({
                                timestamp: Date.now(),
                                geolocation: geolocationData
                            }));
                        }

                        // Make country field editable in case user wants to change
                        countryInput.removeAttribute('readonly');

                    } catch (error) {
                        console.error('Location error:', error);

                        // Reset UI
                        locationIcon.classList.remove('hidden');
                        loadingSpinner.classList.add('hidden');
                        countryInput.value = '';
                        countryInput.placeholder = '{{contact.form.country_manual}}';
                        countryInput.removeAttribute('readonly');
                        countryInput.classList.remove('bg-gray-50');

                        // Show helpful error message with retry option
                        const errorMessage = error.code === 1 ?
                            '{{contact.form.location_denied}}' :
                            '{{contact.form.location_unavailable}}';

                        locationInfo.innerHTML = errorMessage +
                            '<br><button type="button" onclick="document.getElementById(\'country\').click()" style="color: #F97316; text-decoration: underline; background: none; border: none; cursor: pointer; font-size: inherit;">{{contact.form.retry}}</button>';
                        locationInfo.classList.remove('hidden');
                        locationInfo.classList.add('text-red-600');
                    } finally {
                        // Reset loading state
                        locationIcon.classList.remove('hidden');
                        loadingSpinner.classList.add('hidden');
                    }
                });
            }
        });

        // Handle captcha click - trigger the input field click instead
        document.addEventListener('DOMContentLoaded', function() {
            const recaptchaBox = document.getElementById('recaptchaBox');
            const countryInput = document.getElementById('country');

            if (recaptchaBox && countryInput) {
                recaptchaBox.addEventListener('click', async function() {
                    if (captchaVerified) return;

                    // Trigger the country input click to unify the logic
                    countryInput.click();
                });
            }


            // Check if captcha was recently verified (within 5 minutes)
            const verifiedData = sessionStorage.getItem('captchaVerified');
            if (verifiedData) {
                const data = JSON.parse(verifiedData);
                if (data.timestamp && (Date.now() - data.timestamp) < 300000) {
                    const checkbox = document.getElementById('recaptchaCheckbox');
                    const submitButton = document.getElementById('submitButton');
                    checkbox.classList.add('verified');
                    captchaVerified = true;
                    geolocationData = data.geolocation;
                    submitButton.disabled = false;
                }
            }
        });

        // Contact form handling
        const contactForm = document.getElementById('contactForm');
        if (contactForm) {
            contactForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                // Check honeypot
                const honeypot = document.getElementById('website');
                if (honeypot && honeypot.value) {
                    behavioralData.honeypotTriggered = true;
                    console.log('Bot detected');
                    return;
                }

                // Check captcha
                if (!captchaVerified) {
                    alert('{{contact.form.verify_captcha}}');
                    return;
                }

                const submitButton = this.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;
                const formElement = this;
                const sectionElement = document.getElementById('contactSection');

                // Show loading state
                submitButton.innerHTML = `
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    {{contact.form.submitting}}
                `;
                submitButton.disabled = true;

                // Create AbortController for timeout
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 30000);

                try {
                    // Calculate time to submit
                    behavioralData.timeToSubmit = Math.round((Date.now() - new Date(formLoadTime).getTime()) / 1000);
                    behavioralData.submissionTime = new Date().toISOString();

                    // Get form data
                    const formData = new FormData(this);

                    // Add additional data to FormData
                    formData.append('captchaVerified', captchaVerified);
                    formData.append('geolocation', JSON.stringify(geolocationData));
                    formData.append('behavioral', JSON.stringify(behavioralData));
                    formData.append('timestamp', Date.now());
                    formData.append('lang', '{{#if isFrench}}fr{{else}}en{{/if}}');

                    // For now, just show success message (no actual backend)
                    await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate submission

                    clearTimeout(timeoutId);

                    // Replace entire section for mobile compatibility
                    if (sectionElement) {
                        sectionElement.innerHTML = `
                            <div class="container mx-auto px-6">
                                <div class="max-w-2xl mx-auto">
                                    <div style="text-align: center; padding: 60px 20px; min-height: 400px; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                                        <div style="display: inline-flex; align-items: center; justify-content: center; width: 80px; height: 80px; background-color: #dcfce7; border-radius: 50%; margin-bottom: 30px;">
                                            <svg style="width: 40px; height: 40px; color: #16a34a;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                        </div>
                                        <h2 style="font-size: 36px; font-weight: bold; color: #111827; margin-bottom: 16px; font-family: 'Open Sans', sans-serif;">{{contact.form.success_title}}</h2>
                                        <p style="font-size: 18px; color: #4b5563; margin-bottom: 32px; max-width: 500px; line-height: 1.6;">{{contact.form.success_message}}</p>
                                        <p style="font-size: 14px; color: #6b7280; margin-bottom: 32px;">{{contact.form.reference_id}}: <strong>CONT-${Date.now()}</strong></p>
                                        <div style="display: flex; gap: 16px; justify-content: center; flex-wrap: wrap;">
                                            <button onclick="window.location.href='{{#if isFrench}}/fr{{else}}/{{/if}}'" style="display: inline-block; background-color: transparent; color: #111827; padding: 16px 32px; border-radius: 8px; font-weight: 600; text-decoration: none; font-size: 16px; transition: all 0.2s; border: 2px solid #F97316; cursor: pointer;">
                                                {{contact.form.back_home}}
                                            </button>
                                            <button onclick="window.location.reload()" style="display: inline-block; background-color: #F97316; color: white; padding: 16px 32px; border-radius: 8px; font-weight: 600; text-decoration: none; font-size: 16px; transition: background-color 0.2s; border: none; cursor: pointer;">
                                                {{contact.form.send_another}}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }

                    // Also hide the form as backup
                    formElement.style.display = 'none';

                    // Clear captcha verification
                    sessionStorage.removeItem('captchaVerified');

                } catch (error) {
                    clearTimeout(timeoutId);

                    if (error.name === 'AbortError') {
                        alert('{{contact.form.timeout}}');
                    } else {
                        console.error('Error submitting form:', error);
                        alert('{{contact.form.error}}');
                    }
                    submitButton.innerHTML = originalButtonText;
                    submitButton.disabled = !captchaVerified;
                }
            });
        }
    </script>
</body>
</html>